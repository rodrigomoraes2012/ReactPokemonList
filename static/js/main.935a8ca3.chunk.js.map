{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","entry_number","pokemon_species","name","CardList","monsters","map","pokemon","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","string","id","pokedex","fetch","then","response","json","users","result","pokemon_entries","console","log","this","filteredPokemon","filter","toLowerCase","includes","logo","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,oQCE9BC,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,QAAQC,IAAG,mFAA8EH,EAAMI,QAAQC,aAA5F,UACpB,+BAAKL,EAAMI,QAAQE,gBAAgBC,KAAnC,QCDKC,EAAW,SAAAR,GACpB,OAAO,yBAAKC,UAAU,aAEjBD,EAAMS,SAASC,KAAI,SAAAC,GAAO,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EAAQN,aAAcD,QAASO,SCLzCE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,2BACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgEHG,E,YAlEd,aAAc,IAAD,8BACZ,+CAsCDH,aAAe,SAACI,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAtCrC,EAAKC,MAAQ,CACZC,OAAQ,cACRhB,SAAU,CACT,CACCF,KAAM,eACNmB,GAAI,KAEL,CACCnB,KAAM,UACNmB,GAAI,KAEL,CACCnB,KAAM,SACNmB,GAAI,MAGNC,QAAS,GACTN,YAAa,IAnBF,E,iFAwBO,IAAD,OAClBO,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACX,SAAUuB,OAExCJ,MAAM,uCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GACL,EAAKb,SACH,CAACO,QAASM,EAAOC,kBACjB,kBAAMC,QAAQC,IAAI,EAAKZ,e,+BASlB,IAAD,SACwBa,KAAKb,MAA7BG,EADA,EACAA,QAASN,EADT,EACSA,YACViB,EAAkBX,EAAQY,QAAO,SAAA5B,GAAO,OAAIA,EAAQL,gBAAgBC,KAAKiC,cAAcC,SAASpB,EAAYmB,kBAClH,OACC,yBAAKvC,UAAU,OACf,4BAAQA,UAAU,cACjB,6BACC,yBAAKE,IAAKuC,IAAMzC,UAAU,WAAWC,IAAI,SACzC,6CAGD,kBAAC,EAAD,CACCY,YAAY,YACZC,aAAesB,KAAKtB,eAErB,kBAAC,EAAD,CAAUN,SAAU6B,IACpB,4BAAQK,QAAS,kBAAM,EAAKvB,SAAS,CAACK,OAAQ,mBAA9C,qB,GA5DcmB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.935a8ca3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './card.styles.css'\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"teste\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.monster.entry_number}.png`}></img>\n        <p> {props.monster.pokemon_species.name} </p>\n    </div>\n)","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = props => {\n    return <div className='card-list'>\n    \n        {props.monsters.map(pokemon => \n            <Card key={pokemon.entry_number} monster={pokemon}/>\n        )}\n    </div>\n}","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tstring: 'Teste 12345',\n\t\t\tmonsters: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Frankenstein',\n\t\t\t\t\tid: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Dracula',\n\t\t\t\t\tid: '2'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Zombie',\n\t\t\t\t\tid: '3'\n\t\t\t\t},\n\t\t\t],\n\t\t\tpokedex: [],\n\t\t\tsearchField: '',\n\t\t}\n\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({monsters: users}))\n\n\t\tfetch('https://pokeapi.co/api/v2/pokedex/1')\n\t\t.then(response => response.json())\n\t\t.then(result => {\n\t\t\tthis.setState(\n\t\t\t\t\t{pokedex: result.pokemon_entries},\n\t\t\t\t\t() => console.log(this.state)\n\t\t\t\t)\n\t\t})\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({searchField: e.target.value})\n\t}\n\n\trender(){\n\t\tconst {pokedex, searchField} = this.state\n\t\tconst filteredPokemon = pokedex.filter(pokemon => pokemon.pokemon_species.name.toLowerCase().includes(searchField.toLowerCase()))\n\t\treturn(\n\t\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div>\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<h1>Pokemon List</h1>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder='Pesquisar'\n\t\t\t\t\thandleChange= {this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filteredPokemon}></CardList>\n\t\t\t\t<button onClick={() => this.setState({string: 'Teste 123456'})}>Change Text</button>\n\t\t\t</header>\n\t\t  </div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}